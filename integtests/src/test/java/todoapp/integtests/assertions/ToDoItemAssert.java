package todoapp.integtests.assertions;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

import todoapp.dom.module.todoitem.ToDoItem;

/**
 * {@link ToDoItem} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ToDoItemAssert extends AbstractAssert<ToDoItemAssert, ToDoItem> {

  /**
   * Creates a new <code>{@link ToDoItemAssert}</code> to make assertions on actual ToDoItem.
   * @param actual the ToDoItem we want to make assertions on.
   */
  public ToDoItemAssert(ToDoItem actual) {
    super(actual, ToDoItemAssert.class);
  }

  /**
   * An entry point for ToDoItemAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myToDoItem)</code> and get specific assertion with code completion.
   * @param actual the ToDoItem we want to make assertions on.
   * @return a new <code>{@link ToDoItemAssert}</code>
   */
  public static ToDoItemAssert assertThat(ToDoItem actual) {
    return new ToDoItemAssert(actual);
  }

  /**
   * Verifies that the actual ToDoItem's atPath is equal to the given one.
   * @param atPath the given atPath to compare the actual ToDoItem's atPath to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's atPath is not equal to the given one.
   */
  public ToDoItemAssert hasAtPath(String atPath) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting atPath of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAtPath = actual.getAtPath();
    if (!Objects.areEqual(actualAtPath, atPath)) {
      failWithMessage(assertjErrorMessage, actual, atPath, actualAtPath);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's attachment is equal to the given one.
   * @param attachment the given attachment to compare the actual ToDoItem's attachment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's attachment is not equal to the given one.
   */
  public ToDoItemAssert hasAttachment(org.apache.isis.applib.value.Blob attachment) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting attachment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.isis.applib.value.Blob actualAttachment = actual.getAttachment();
    if (!Objects.areEqual(actualAttachment, attachment)) {
      failWithMessage(assertjErrorMessage, actual, attachment, actualAttachment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's calendarName is equal to the given one.
   * @param calendarName the given calendarName to compare the actual ToDoItem's calendarName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's calendarName is not equal to the given one.
   */
  public ToDoItemAssert hasCalendarName(String calendarName) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting calendarName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualCalendarName = actual.getCalendarName();
    if (!Objects.areEqual(actualCalendarName, calendarName)) {
      failWithMessage(assertjErrorMessage, actual, calendarName, actualCalendarName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's category is equal to the given one.
   * @param category the given category to compare the actual ToDoItem's category to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's category is not equal to the given one.
   */
  public ToDoItemAssert hasCategory(todoapp.dom.module.categories.Category category) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting category of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    todoapp.dom.module.categories.Category actualCategory = actual.getCategory();
    if (!Objects.areEqual(actualCategory, category)) {
      failWithMessage(assertjErrorMessage, actual, category, actualCategory);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's cost is equal to the given one.
   * @param cost the given cost to compare the actual ToDoItem's cost to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's cost is not equal to the given one.
   */
  public ToDoItemAssert hasCost(java.math.BigDecimal cost) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cost of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.math.BigDecimal actualCost = actual.getCost();
    if (!Objects.areEqual(actualCost, cost)) {
      failWithMessage(assertjErrorMessage, actual, cost, actualCost);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's dependencies contains the given ToDoItem elements.
   * @param dependencies the given elements that should be contained in actual ToDoItem's dependencies.
   * @return this assertion object.
   * @throws AssertionError if the actual ToDoItem's dependencies does not contain all given ToDoItem elements.
   */
  public ToDoItemAssert hasDependencies(ToDoItem... dependencies) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // check that given ToDoItem varargs is not null.
    if (dependencies == null) failWithMessage("Expecting dependencies parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getDependencies(), dependencies);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's dependencies contains <b>only<b> the given ToDoItem elements and nothing else in whatever order.
   * @param dependencies the given elements that should be contained in actual ToDoItem's dependencies.
   * @return this assertion object.
   * @throws AssertionError if the actual ToDoItem's dependencies does not contain all given ToDoItem elements.
   */
  public ToDoItemAssert hasOnlyDependencies(ToDoItem... dependencies) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // check that given ToDoItem varargs is not null.
    if (dependencies == null) failWithMessage("Expecting dependencies parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getDependencies(), dependencies);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's dependencies does not contain the given ToDoItem elements.
   *
   * @param dependencies the given elements that should not be in actual ToDoItem's dependencies.
   * @return this assertion object.
   * @throws AssertionError if the actual ToDoItem's dependencies contains any given ToDoItem elements.
   */
  public ToDoItemAssert doesNotHaveDependencies(ToDoItem... dependencies) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // check that given ToDoItem varargs is not null.
    if (dependencies == null) failWithMessage("Expecting dependencies parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getDependencies(), dependencies);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem has no dependencies.
   * @return this assertion object.
   * @throws AssertionError if the actual ToDoItem's dependencies is not empty.
   */
  public ToDoItemAssert hasNoDependencies() {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have dependencies but had :\n  <%s>";
    
    // check
    if (actual.getDependencies().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getDependencies());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual ToDoItem's description is equal to the given one.
   * @param description the given description to compare the actual ToDoItem's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's description is not equal to the given one.
   */
  public ToDoItemAssert hasDescription(String description) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's doc is equal to the given one.
   * @param doc the given doc to compare the actual ToDoItem's doc to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's doc is not equal to the given one.
   */
  public ToDoItemAssert hasDoc(org.apache.isis.applib.value.Clob doc) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting doc of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.isis.applib.value.Clob actualDoc = actual.getDoc();
    if (!Objects.areEqual(actualDoc, doc)) {
      failWithMessage(assertjErrorMessage, actual, doc, actualDoc);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's dueBy is equal to the given one.
   * @param dueBy the given dueBy to compare the actual ToDoItem's dueBy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's dueBy is not equal to the given one.
   */
  public ToDoItemAssert hasDueBy(org.joda.time.LocalDate dueBy) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting dueBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.joda.time.LocalDate actualDueBy = actual.getDueBy();
    if (!Objects.areEqual(actualDueBy, dueBy)) {
      failWithMessage(assertjErrorMessage, actual, dueBy, actualDueBy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's location is equal to the given one.
   * @param location the given location to compare the actual ToDoItem's location to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's location is not equal to the given one.
   */
  public ToDoItemAssert hasLocation(org.isisaddons.wicket.gmap3.cpt.applib.Location location) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting location of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.isisaddons.wicket.gmap3.cpt.applib.Location actualLocation = actual.getLocation();
    if (!Objects.areEqual(actualLocation, location)) {
      failWithMessage(assertjErrorMessage, actual, location, actualLocation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's notes is equal to the given one.
   * @param notes the given notes to compare the actual ToDoItem's notes to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's notes is not equal to the given one.
   */
  public ToDoItemAssert hasNotes(String notes) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting notes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNotes = actual.getNotes();
    if (!Objects.areEqual(actualNotes, notes)) {
      failWithMessage(assertjErrorMessage, actual, notes, actualNotes);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's subcategory is equal to the given one.
   * @param subcategory the given subcategory to compare the actual ToDoItem's subcategory to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's subcategory is not equal to the given one.
   */
  public ToDoItemAssert hasSubcategory(todoapp.dom.module.categories.Subcategory subcategory) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting subcategory of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    todoapp.dom.module.categories.Subcategory actualSubcategory = actual.getSubcategory();
    if (!Objects.areEqual(actualSubcategory, subcategory)) {
      failWithMessage(assertjErrorMessage, actual, subcategory, actualSubcategory);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's versionSequence is equal to the given one.
   * @param versionSequence the given versionSequence to compare the actual ToDoItem's versionSequence to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's versionSequence is not equal to the given one.
   */
  public ToDoItemAssert hasVersionSequence(Long versionSequence) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting versionSequence of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualVersionSequence = actual.getVersionSequence();
    if (!Objects.areEqual(actualVersionSequence, versionSequence)) {
      failWithMessage(assertjErrorMessage, actual, versionSequence, actualVersionSequence);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem is complete.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem is not complete.
   */
  public ToDoItemAssert isComplete() {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isComplete()) {
      failWithMessage("\nExpecting that actual ToDoItem is complete but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem is not complete.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem is complete.
   */
  public ToDoItemAssert isNotComplete() {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isComplete()) {
      failWithMessage("\nExpecting that actual ToDoItem is not complete but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem is due.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem is not due.
   */
  public ToDoItemAssert isDue() {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isDue()) {
      failWithMessage("\nExpecting that actual ToDoItem is due but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem is not due.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem is due.
   */
  public ToDoItemAssert isNotDue() {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isDue()) {
      failWithMessage("\nExpecting that actual ToDoItem is not due but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's actionInvocationContext is equal to the given one.
   * @param actionInvocationContext the given actionInvocationContext to compare the actual ToDoItem's actionInvocationContext to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's actionInvocationContext is not equal to the given one.
   */
  public ToDoItemAssert hasActionInvocationContext(org.apache.isis.applib.services.actinvoc.ActionInvocationContext actionInvocationContext) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting actionInvocationContext of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.isis.applib.services.actinvoc.ActionInvocationContext actualActionInvocationContext = actual.actionInvocationContext;
    if (!Objects.areEqual(actualActionInvocationContext, actionInvocationContext)) {
      failWithMessage(assertjErrorMessage, actual, actionInvocationContext, actualActionInvocationContext);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ToDoItem's eventBusService is equal to the given one.
   * @param eventBusService the given eventBusService to compare the actual ToDoItem's eventBusService to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ToDoItem's eventBusService is not equal to the given one.
   */
  public ToDoItemAssert hasEventBusService(org.apache.isis.applib.services.eventbus.EventBusService eventBusService) {
    // check that actual ToDoItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting eventBusService of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.isis.applib.services.eventbus.EventBusService actualEventBusService = actual.eventBusService;
    if (!Objects.areEqual(actualEventBusService, eventBusService)) {
      failWithMessage(assertjErrorMessage, actual, eventBusService, actualEventBusService);
    }

    // return the current assertion for method chaining
    return this;
  }

}
