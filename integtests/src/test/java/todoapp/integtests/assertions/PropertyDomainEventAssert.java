package todoapp.integtests.assertions;

import org.apache.isis.applib.services.eventbus.AbstractDomainEvent;
import org.apache.isis.applib.services.eventbus.AbstractInteractionEvent;
import org.apache.isis.applib.services.eventbus.PropertyDomainEvent;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link PropertyDomainEvent} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PropertyDomainEventAssert<S, T> extends AbstractAssert<PropertyDomainEventAssert<S, T>, PropertyDomainEvent<S, T>> {

  /**
   * Creates a new <code>{@link PropertyDomainEventAssert}</code> to make assertions on actual PropertyDomainEvent.
   * @param actual the PropertyDomainEvent we want to make assertions on.
   */
  public PropertyDomainEventAssert(PropertyDomainEvent<S, T> actual) {
    super(actual, PropertyDomainEventAssert.class);
  }

  /**
   * An entry point for PropertyDomainEventAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPropertyDomainEvent)</code> and get specific assertion with code completion.
   * @param actual the PropertyDomainEvent we want to make assertions on.
   * @return a new <code>{@link PropertyDomainEventAssert}</code>
   */
  public static <S, T> PropertyDomainEventAssert<S, T> assertThat(PropertyDomainEvent<S, T> actual) {
    return new PropertyDomainEventAssert<S, T>(actual);
  }

  /**
   * Verifies that the actual PropertyDomainEvent's disabledReason is equal to the given one.
   * @param disabledReason the given disabledReason to compare the actual PropertyDomainEvent's disabledReason to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent's disabledReason is not equal to the given one.
   */
  public PropertyDomainEventAssert<S, T> hasDisabledReason(String disabledReason) {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting disabledReason of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDisabledReason = actual.getDisabledReason();
    if (!Objects.areEqual(actualDisabledReason, disabledReason)) {
      failWithMessage(assertjErrorMessage, actual, disabledReason, actualDisabledReason);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent's disabledReasonTranslatable is equal to the given one.
   * @param disabledReasonTranslatable the given disabledReasonTranslatable to compare the actual PropertyDomainEvent's disabledReasonTranslatable to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent's disabledReasonTranslatable is not equal to the given one.
   */
  public PropertyDomainEventAssert<S, T> hasDisabledReasonTranslatable(org.apache.isis.applib.services.i18n.TranslatableString disabledReasonTranslatable) {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting disabledReasonTranslatable of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.isis.applib.services.i18n.TranslatableString actualDisabledReasonTranslatable = actual.getDisabledReasonTranslatable();
    if (!Objects.areEqual(actualDisabledReasonTranslatable, disabledReasonTranslatable)) {
      failWithMessage(assertjErrorMessage, actual, disabledReasonTranslatable, actualDisabledReasonTranslatable);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent's eventPhase is equal to the given one.
   * @param eventPhase the given eventPhase to compare the actual PropertyDomainEvent's eventPhase to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent's eventPhase is not equal to the given one.
   */
  public PropertyDomainEventAssert<S, T> hasEventPhase(AbstractDomainEvent.Phase eventPhase) {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting eventPhase of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    AbstractDomainEvent.Phase actualEventPhase = actual.getEventPhase();
    if (!Objects.areEqual(actualEventPhase, eventPhase)) {
      failWithMessage(assertjErrorMessage, actual, eventPhase, actualEventPhase);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent's identifier is equal to the given one.
   * @param identifier the given identifier to compare the actual PropertyDomainEvent's identifier to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent's identifier is not equal to the given one.
   */
  public PropertyDomainEventAssert<S, T> hasIdentifier(org.apache.isis.applib.Identifier identifier) {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting identifier of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.isis.applib.Identifier actualIdentifier = actual.getIdentifier();
    if (!Objects.areEqual(actualIdentifier, identifier)) {
      failWithMessage(assertjErrorMessage, actual, identifier, actualIdentifier);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent's invalidityReason is equal to the given one.
   * @param invalidityReason the given invalidityReason to compare the actual PropertyDomainEvent's invalidityReason to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent's invalidityReason is not equal to the given one.
   */
  public PropertyDomainEventAssert<S, T> hasInvalidityReason(String invalidityReason) {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting invalidityReason of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualInvalidityReason = actual.getInvalidityReason();
    if (!Objects.areEqual(actualInvalidityReason, invalidityReason)) {
      failWithMessage(assertjErrorMessage, actual, invalidityReason, actualInvalidityReason);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent's invalidityReasonTranslatable is equal to the given one.
   * @param invalidityReasonTranslatable the given invalidityReasonTranslatable to compare the actual PropertyDomainEvent's invalidityReasonTranslatable to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent's invalidityReasonTranslatable is not equal to the given one.
   */
  public PropertyDomainEventAssert<S, T> hasInvalidityReasonTranslatable(org.apache.isis.applib.services.i18n.TranslatableString invalidityReasonTranslatable) {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting invalidityReasonTranslatable of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.isis.applib.services.i18n.TranslatableString actualInvalidityReasonTranslatable = actual.getInvalidityReasonTranslatable();
    if (!Objects.areEqual(actualInvalidityReasonTranslatable, invalidityReasonTranslatable)) {
      failWithMessage(assertjErrorMessage, actual, invalidityReasonTranslatable, actualInvalidityReasonTranslatable);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent's newValue is equal to the given one.
   * @param newValue the given newValue to compare the actual PropertyDomainEvent's newValue to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent's newValue is not equal to the given one.
   */
  public PropertyDomainEventAssert<S, T> hasNewValue(Object newValue) {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting newValue of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualNewValue = actual.getNewValue();
    if (!Objects.areEqual(actualNewValue, newValue)) {
      failWithMessage(assertjErrorMessage, actual, newValue, actualNewValue);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent's oldValue is equal to the given one.
   * @param oldValue the given oldValue to compare the actual PropertyDomainEvent's oldValue to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent's oldValue is not equal to the given one.
   */
  public PropertyDomainEventAssert<S, T> hasOldValue(Object oldValue) {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting oldValue of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualOldValue = actual.getOldValue();
    if (!Objects.areEqual(actualOldValue, oldValue)) {
      failWithMessage(assertjErrorMessage, actual, oldValue, actualOldValue);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent's phase is equal to the given one.
   * @param phase the given phase to compare the actual PropertyDomainEvent's phase to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent's phase is not equal to the given one.
   */
  public PropertyDomainEventAssert<S, T> hasPhase(AbstractInteractionEvent.Phase phase) {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting phase of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    AbstractInteractionEvent.Phase actualPhase = actual.getPhase();
    if (!Objects.areEqual(actualPhase, phase)) {
      failWithMessage(assertjErrorMessage, actual, phase, actualPhase);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent's source is equal to the given one.
   * @param source the given source to compare the actual PropertyDomainEvent's source to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent's source is not equal to the given one.
   */
  public PropertyDomainEventAssert<S, T> hasSource(Object source) {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting source of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualSource = actual.getSource();
    if (!Objects.areEqual(actualSource, source)) {
      failWithMessage(assertjErrorMessage, actual, source, actualSource);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent is disabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent is not disabled.
   */
  public PropertyDomainEventAssert<S, T> isDisabled() {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isDisabled()) {
      failWithMessage("\nExpecting that actual PropertyDomainEvent is disabled but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent is not disabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent is disabled.
   */
  public PropertyDomainEventAssert<S, T> isNotDisabled() {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isDisabled()) {
      failWithMessage("\nExpecting that actual PropertyDomainEvent is not disabled but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent is hidden.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent is not hidden.
   */
  public PropertyDomainEventAssert<S, T> isHidden() {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isHidden()) {
      failWithMessage("\nExpecting that actual PropertyDomainEvent is hidden but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent is not hidden.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent is hidden.
   */
  public PropertyDomainEventAssert<S, T> isNotHidden() {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isHidden()) {
      failWithMessage("\nExpecting that actual PropertyDomainEvent is not hidden but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent is invalid.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent is not invalid.
   */
  public PropertyDomainEventAssert<S, T> isInvalid() {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isInvalid()) {
      failWithMessage("\nExpecting that actual PropertyDomainEvent is invalid but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PropertyDomainEvent is not invalid.
   * @return this assertion object.
   * @throws AssertionError - if the actual PropertyDomainEvent is invalid.
   */
  public PropertyDomainEventAssert<S, T> isNotInvalid() {
    // check that actual PropertyDomainEvent we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isInvalid()) {
      failWithMessage("\nExpecting that actual PropertyDomainEvent is not invalid but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
